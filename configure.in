dnl
dnl autoconf for heartbeat
dnl	Started by David Lee <T.D.Lee@durham.ac.uk> December 2000
dnl automake stuff 
dnl     added by Michael Moerz <e9625136@stud3.tuwien.ac.at> February 2001

dnl Initialiase, with sanity check of a unique file in the hierarchy
AC_REVISION($Revision: 1.58 $) dnl cvs revision
AC_INIT(heartbeat.spec.in)
dnl AC_CONFIG_AUX_DIR(config)
AC_CANONICAL_HOST

dnl Where #defines go (e.g. `AC_CHECK_HEADERS' below)
AM_CONFIG_HEADER(linux-ha/config.h)
AM_INIT_AUTOMAKE(heartbeat, 0.4.9a)
RPMREL=1
AC_SUBST(RPMREL)


dnl
dnl	Don't ya just hate working around buggy code?
#
# case $exec_prefix in
#  NONE|""|*'${'*)	exec_prefix=$prefix;;
#esac
#case $sbindir in
#  NONE|""|*'${'*)	sbindir=$exec_prefix/sbin;;
#esac
#case $libdir in
#  NONE|""|*'${'*)	libdir=$exec_prefix/lib;;
#esac
#case $mandir in
#  NONE|""|*'${'*)	mandir=$prefix/man;;
#esac
#case $includedir in
#  NONE|""|*'${'*)	includedir=$prefix/include;;
#esac

dnl	We use this in the RPM specfile...
AC_SUBST(ac_configure_args)

dnl *************************************************************************
SYSPATH="/bin /usr/bin /sbin /usr/sbin /usr/local/sbin /usr/local/bin"
dnl checks for programs
dnl 
dnl Which C compiler?
dnl Defaults to GNU C compiler if available.
dnl Always tries to set the compiler to ANSI C via options (AM)
dnl Can force other with environment variable "CC".
AC_PROG_CC
AM_PROG_CC_STDC
AC_LIBTOOL_DLOPEN               dnl Enable dlopen support...
AC_LIBLTDL_CONVENIENCE          dnl make libltdl a convenience lib
AM_PROG_LIBTOOL
AC_CHECK_PROG(HTML2TXT, lynx, lynx)
AC_CHECK_PROG(POD2MAN, pod2man, pod2man)
AC_PATH_PROGS(ROUTE, route)
AC_PATH_PROGS(RPM, rpm)
AC_DEFINE_UNQUOTED(ROUTE, "$ROUTE", path to route command)
AC_PATH_PROGS(NETSTAT, netstat)
AC_DEFINE_UNQUOTED(NETSTAT, "$NETSTAT", path to the netstat command)
AC_PATH_PROGS(IFCONFIG, ifconfig)
AC_DEFINE_UNQUOTED(IFCONFIG, "$IFCONFIG", path to the ifconfig command)
AC_PATH_PROGS(GLIBCCONFIG, glib-config, glib12-config)
AC_PATH_PROGS(GLIBCCONFIG, glib12-config, glib13-config)
AC_PATH_PROGS(GLIBCCONFIG, glib13-config)
AC_MSG_CHECKING(which glibc config exists)
if test x"${GLIBCCONFIG}" = x""; then
        AC_MSG_ERROR(You need the glib development package to continue.
      You can get the source from ftp://ftp.gtk.org/pub/gtk/v1.2/
      or you can locate it via http://www.gtk.org/download/)
else
      AC_MSG_RESULT("using $GLIBCCONFIG")
fi


AC_MSG_CHECKING(if netstat supports -f inet flag)
$NETSTAT -rn -f inet > /dev/null 2>&1
if test x"$?" = x"0"; then
	AC_DEFINE(NETSTATPARM, "-rn -f inet ", parameters to netstat to retrieve route information)
	AC_MSG_RESULT("yes")
else	
	AC_DEFINE(NETSTATPARM, "-rn ", parameters to netstat to retrieve route information)
	AC_MSG_RESULT("no")
fi

AC_MSG_CHECKING(if route supports get directive)
$ROUTE -n get 127.0.0.1 > /dev/null 2>&1
if test x"$?" = x"0"; then
	AC_DEFINE(USE_ROUTE_GET, 1, use route -get to retrieve route information)
	AC_DEFINE(ROUTEPARM, "-n get", paramters for route to retrieve route information)
        AC_DEFINE(PROCROUTE, "", not used in except in linux)
	AC_MSG_RESULT(yes)
else
	AC_DEFINE(ROUTEPARM, "-n ", parameters for route to retrieve route information)
	AC_DEFINE(PROCROUTE, "/proc/net/route", path were to find route information in proc)
	AC_MSG_RESULT(no)
fi


AC_SUBST(HTML2TXT)
AC_SUBST(POD2MAN)
AC_SUBST(ROUTEPARM)
AC_SUBST(PROCROUTE)

dnl Locales check - is a real ugly workaround for now til I find
dnl something more useful
dnl
dnl "Eric Z. Ayers" wrote:
dnl > 
dnl > Here are some more data points:
dnl > 
dnl > SUN: /usr/lib/locale/
dnl > HP : /usr/lib/nls/loc/
dnl > OSF: /usr/lib/nls/loc/
dnl > LINUX: /usr/share/locale/
dnl > UNIXWARE: /usr/lib/locale/
dnl > FREEBSD: /usr/share/locale
dnl > VMS:  just kidding
dnl 
FindADir() {
	type="$1"
	whatfor="$2"
	shift; shift;
	AC_MSG_CHECKING(for $whatfor directory)
	for dir
	do
	  if
	    test -d "$dir"
          then
            AC_MSG_RESULT($dir)
	    echo $dir
	    return 0
	  fi
	done
	AC_MSG_RESULT(not found)
        return 1
	  
}
locale_locations="/usr/share/locale /usr/lib/locale /usr/lib/nls/loc"
LOCALE=`FindADir error "locale" $locale_locations`
if
  test  X$LOCALE = X
then
  AC_MSG_ERROR(Locale directory is mandantory.)
fi

RPMDIR=`FindADir warn "RPM" /usr/src/packages /usr/src/redhat`


dnl
dnl	Look for #define CLK_TCK in limits.h (Solaris)
dnl

AC_MSG_CHECKING("for CLK_TCK in limits.h")
AC_EGREP_CPP(FoundClkTck,
[
#include <limits.h>
#ifdef CLK_TCK
  FoundClkTck
#endif
], 
[
        AC_DEFINE(CLK_TCK_IN_LIMITS_H,1) 
        AC_MSG_RESULT("Yes") 
],
AC_MSG_RESULT("No"))

dnl
dnl	Look for #define CLK_TCK in time.h (Linux)
dnl

AC_MSG_CHECKING("for CLK_TCK in time.h")
AC_EGREP_CPP(FoundClkTck,
[#include <time.h>
#ifdef CLK_TCK
  FoundClkTck
#endif
], [
        AC_DEFINE(CLK_TCK_IN_TIME_H,1)
        AC_MSG_RESULT("Yes") 
],
AC_MSG_RESULT("No"))

dnl ************************************************************************
dnl checks for libraries
dnl
AC_CHECK_LIB(nsl, t_open)                dnl -lnsl
AC_CHECK_LIB(socket, socket)             dnl -lsocket
AC_CHECK_LIB(posix4, sched_getscheduler) dnl -lposix4
AC_CHECK_LIB(dl, dlopen)		 dnl -ldl (for Linux)
AC_CHECK_LIB(c, dlopen)		 	 dnl -ldl (for Linux)
AC_CHECK_LIB(glib, g_string_new)	 dnl -lglib
#
#	Is dlopen in library -ldl?
#
if test "$ac_cv_lib_dl_dlopen" = yes; then
	LIBADD_DL=-ldl
else
#
#	Is dlopen in library -lintl?
#
	AC_CHECK_LIB(intl, gettext)	 dnl -lintl (for FreeBsd)
	if test "$ac_cv_lib_intl_gettext" = yes; then
		LIBADD_DL=-lintl
	else
#
#	How about libc?
#
	        AC_CHECK_LIB(c, dlopen)	 dnl -lc - for FreeBSD
	        if test "$ac_cv_lib_c_dlopen" != yes; then
		  AC_MSG_ERROR(no lib providing dlopen found)
                fi
	fi
fi

AC_MSG_CHECKING(whether we need to include /usr/local/include)
dnl
dnl this is mainly for FreeBSD...
if
  test ! -f /usr/include/libintl.h  -a -f /usr/local/include/libintl.h
then
  AC_MSG_RESULT(yes)
  CPPFLAGS="$CPPFLAGS -I/usr/local/include"
  LIBADD_DL="$LIBADD_DL -lintl"
else
  AC_MSG_RESULT(no)
fi

dnl
dnl	Glib allows its headers/libraries to be installed anywhere.
dnl	And they provide a command to let you know where they are.
dnl	This is nice, but having them in standard places is nicer ;-)
dnl
AC_MSG_CHECKING(for special glib includes: )
GLHEAD=`$GLIBCCONFIG --cflags`
AC_MSG_RESULT($GLHEAD)

CPPFLAGS="$CPPFLAGS $GLHEAD"
AC_MSG_CHECKING(for glib library flags)
GLIBLIB=`$GLIBCCONFIG --libs`
LIBS="$LIBS $GLIBLIB"
AC_MSG_RESULT($GLIBLIB)


dnl ************************************************************************
dnl checks for header files
dnl 
dnl check for ANSI *.h files first
dnl	asm/page.h: Linux, for system PAGE_SIZE
AC_HEADER_STDC
AC_CHECK_HEADERS(db.h asm/page.h time.h)
AC_CHECK_HEADERS(netinet/in_systm.h)
AC_CHECK_HEADERS(netinet/ip_var.h netinet/ip.h netinet/ip_compat.h netinet/ip_fw.h)
AC_CHECK_HEADERS(sys/sockio.h)
AC_CHECK_HEADERS(libintl.h)
AC_CHECK_HEADERS(sys/types.h sys/socket.h netinet/in.h arpa/inet.h)


dnl ************************************************************************
dnl  checks for typedefs
dnl

dnl ************************************************************************
dnl checks for structures
dnl

dnl Check TERMIOS for components (e.g. c_line not present on Solaris)
dnl
AC_CACHE_CHECK([for c_line in termios],samba_cv_HAVE_TERMIOS_C_LINE,[
AC_TRY_COMPILE([#include <sys/types.h>
#include <sys/termios.h>],
[struct termios ti;  ti.c_line = 'a';],
samba_cv_HAVE_TERMIOS_C_LINE=yes,samba_cv_HAVE_TERMIOS_C_LINE=no,samba_cv_HAVE_TERMIOS_C_LINE=cross)])
if test x"$samba_cv_HAVE_TERMIOS_C_LINE" = x"yes"; then
    AC_DEFINE(HAVE_TERMIOS_C_LINE)
fi

dnl Check sockaddr_in for components (e.g. sin_len not present on Solaris)
dnl
AC_CACHE_CHECK([for sin_len in sockaddr_in],samba_cv_HAVE_SOCKADDR_IN_SIN_LEN,[
AC_TRY_COMPILE([#include <sys/types.h>
#include <netinet/in.h>],
[struct sockaddr_in si;  si.sin_len = 1;],
samba_cv_HAVE_SOCKADDR_IN_SIN_LEN=yes,samba_cv_HAVE_SOCKADDR_IN_SIN_LEN=no,samba_cv_HAVE_SOCKADDR_IN_SIN_LEN=cross)])
if test x"$samba_cv_HAVE_SOCKADDR_IN_SIN_LEN" = x"yes"; then
    AC_DEFINE(HAVE_SOCKADDR_IN_SIN_LEN)
fi

dnl ************************************************************************
dnl checks for compiler characteristics
dnl

dnl Warnings for C compilers.  Note: generic, portable warnings only.
dnl Things likely to be specific to a particular OS or module should be
dnl carefully handled afterwards.

AC_C_STRINGIZE

CC_WARNINGS=""
if test "$GCC" = yes; then
dnl
dnl We make sure warnings are carefully scrubbed out of the output if
dnl you're running on some platforms.  You can enable that behavior with
dnl the option "fatal_warnings", by specifying --enable-fatal_warnings.
dnl Or, you can disable it with --disable-fatal_warnings.
dnl

dnl Horms 10th August 2001
        dnl Don't do this, it seems to cause configure in
        dnl the libltdl/ directory to die under Debian Woody
        dnl I'm suspecting it will be a problem on other systems too.
        dnl For this reason it now defaults to off.

dnl AlanR 11 August 2001
dnl Show no mercy to broken OSes and other software.  If you have broken
dnl software, turn this feature off.

dnl NO warnings WHATSOVER will be tolerated without good reason.
dnl A distribution being broken isn't a good reason.
dnl The cure for that is fix the distribution, not destroy the integrity
dnl of the entire project by defaulting it to "off".

dnl In my experience, there are ways of making individual warnings go
dnl away.

dnl The only way I know to keep them out is to make them an absolute
dnl pain to deal with.  Otherwise they're a pain to fix.

dnl This policy is not an accident, nor was it chosen without significant
dnl thought and experience.
dnl 

	case "$host_os" in
  	*linux*)
          	if test "$enable_fatal_warnings" = ""; then
          	echo "defaulting  --enable-fatal_warnings on this platform"
              	enable_fatal_warnings=yes
          	fi
          	;;
	esac


	EXTRA_WARNINGS=""
	if test "$enable_fatal_warnings" = yes; then
    	  EXTRA_WARNINGS="-Werror"
	fi

	if test "$enable_traditional_warning" = yes; then
    	  EXTRA_WARNINGS="$EXTRA_WARNINGS -Wtraditional"
	fi

	CC_WARNINGS="-Wall -Wmissing-prototypes \
		-Wmissing-declarations \
		-Wstrict-prototypes \
		-Wshadow \
		-Wpointer-arith \
		-Wwrite-strings \
		-Wcast-qual -Wcast-align \
		-Wnested-externs -Winline $EXTRA_WARNINGS"
fi

case "$host_os" in
*solaris*)	HEARTBEAT_LIBS="-lposix4"
		;;
*bsd*)		LIBS="$LIBS -L/usr/local/lib"
dnl		STONITH_LDADD="-lintl"
		;;
dnl *linux*)	STONITH_LDADD="-ldl"
dnl 		;;
esac


dnl **********************************************************************
dnl checks for group to install fifos as

dnl
dnl	These checks aren't right.  We need to locate the lowest
dnl	unused group id if haclient isn't in the /etc/group file
dnl	and no one has overridden group-id with a --with-group-id
dnl	option.
dnl

AC_ARG_WITH(
  group-name,
    [  --with-group-name=GROUP_NAME 
                         GROUP_NAME to own API fifos. [default=haclient]  ],
    [ APIGROUP="$withval" ],
    [ APIGROUP="haclient" ],
  )
AC_DEFINE_UNQUOTED(APIGROUP, "$APIGROUP", Group to own API fifos)
AC_SUBST(APIGROUP)

AC_ARG_WITH(
  group-id,
    [  --with-group-id=GROUP_ID  GROUP_ID to own API fifos. [default=60]  ],
    [ APIGID=$withval ],
    [ APIGID=60 ],
  )
AC_DEFINE_UNQUOTED(APIGID, "$APIGID", Group to own API fifos)
AC_SUBST(APIGID)


dnl ************************************************************************
dnl checks for library functions
dnl
dnl	scandir: Only on BSD.
dnl		System-V systems may have it, but hidden and/or deprecated.
dnl		A replacement function is supplied for it.
dnl
dnl	setenv: is some bsdish function that should also be avoided (use
dnl             putenv instead)
dnl		On the other hand, putenv doesn't provide the right API for the
dnl		code and has memory leaks designed in (sigh...)  Fortunately this
dnl		doesn't matter to the linux-ha code at this time.
AC_CHECK_FUNCS(scandir)
AC_CHECK_FUNCS(strerror)
AC_CHECK_FUNCS(inet_aton)
AC_CHECK_FUNCS(flock fcntl)
AC_CHECK_FUNCS(setenv scandir inet_pton)
AC_REPLACE_FUNCS(setenv scandir inet_pton)

dnl **********************************************************************
dnl Check for various argv[] replacing functions on various OSs
dnl
dnl Borrowed from Proftpd
dnl Proftpd is Licenced under the terms of the GNU General Public Licence
dnl and is available from http://www.proftpd.org/
dnl

AC_CHECK_FUNCS(setproctitle)
AC_CHECK_HEADERS(libutil.h)
AC_CHECK_LIB(util, setproctitle,
	[AC_DEFINE(HAVE_SETPROCTITLE)
		ac_cv_func_setproctitle="yes" ; LIBS="$LIBS -lutil"])

if test "$ac_cv_func_setproctitle" = "yes"; then
  AC_DEFINE(PF_ARGV_TYPE, PF_ARGV_NONE)
else
  pf_argv_set="no"

  AC_CHECK_HEADERS(sys/pstat.h,have_pstat_h="yes",have_pstat_h="no")
  if test "$have_pstat_h" = "yes"; then
    AC_CHECK_FUNCS(pstat)
    
    if test "$ac_cv_func_pstat" = "yes"; then
	AC_DEFINE(PF_ARGV_TYPE, PF_ARGV_PSTAT)
    else
	AC_DEFINE(PF_ARGV_TYPE, PF_ARGV_WRITABLE)
    fi

    pf_argv_set="yes"
  fi

  if test "$pf_argv_set" = "no"; then
    AC_EGREP_HEADER([#define.*PS_STRINGS.*],sys/exec.h,
			have_psstrings="yes",have_psstrings="no")
    if test "$have_psstrings" = "yes"; then
	AC_DEFINE(PF_ARGV_TYPE, PF_ARGV_PSSTRINGS)
	pf_argv_set="yes"
    fi
  fi

  if test "$pf_argv_set" = "no"; then
    AC_CACHE_CHECK(whether __progname and __progname_full are available,
		    pf_cv_var_progname,
		    AC_TRY_LINK([extern char *__progname, *__progname_full;],
			[__progname = "foo"; __progname_full = "foo bar";],
			pf_cv_var_progname="yes", pf_cv_var_progname="no"))

    if test "$pf_cv_var_progname" = "yes"; then
	AC_DEFINE(HAVE___PROGNAME)
    fi

    AC_CACHE_CHECK(which argv replacement method to use,
		    pf_cv_argv_type,
		    AC_EGREP_CPP(yes,[
#if defined(__GNU_HURD__)
  yes
#endif
  ],pf_cv_argv_type="new", pf_cv_argv_type="writeable"))

    if test "$pf_cv_argv_type" = "new"; then
	AC_DEFINE(PF_ARGV_TYPE, PF_ARGV_NEW)
	pf_argv_set="yes"
    fi

    if test "$pf_argv_set" = "no"; then
	AC_DEFINE(PF_ARGV_TYPE, PF_ARGV_WRITEABLE)
    fi
  fi
fi
  
dnl End of tests borrowed from Proftpd
  
dnl **********************************************************************
dnl      Check the size of the integer types
dnl      So we can have integers of known sizes as needed
dnl
AC_CHECK_SIZEOF(char)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)

dnl
dnl We reset CFLAGS to include our warnings *after* all function
dnl checking goes on, so that our warning flags don't keep the
dnl AC_*FUNCS() calls above from working.  In particular, -Werror will
dnl *always* cause us troubles if we set it before here.
dnl
dnl
CFLAGS="$CFLAGS $CC_WARNINGS"
dnl AC_SUBST(CC_WARNINGS)

dnl ************************************************************************
dnl pre AC_OUTPUT stuff
dnl

dnl th aux dir (for holding config & autogenerated stuff)
dnl AC_SUBST(ac_aux_dir)

dnl for libtool to work LTLIBOJS is needed (currently bug of autoconf)
Xsed="sed -e s/^X//"
LTLIBOBJS=`echo X"$LIBOBJS"|[$Xsed -e "s,\.[^.]* ,.lo ,g;s,\.[^.]*$,.lo,"]`
AC_SUBST(LTLIBOBJS)

dnl STONITH_LDADD=LIBADD_DL
dnl AC_SUBST(STONITH_LDADD)
AC_SUBST(LIBADD_DL)

AC_SUBST(LOCALE)

HEARTBEATPKG=heartbeat
AC_SUBST(HEARTBEATPKG)

STONITHPKG=stonith
AC_SUBST(STONITHPKG)

dnl libltdl additions
AC_SUBST(INCLTDL)
AC_SUBST(LIBLTDL)


dnl **********************************************************************
dnl	Enable optional, experimental directories here...
dnl	NOTE:  these are no longer experimental...
dnl
XPERIMENTALDIRS=""
dnl AC_MSG_CHECKING(for --enable_new_modloader)
dnl if test "$enable_new_modloader" = yes; then
dnl   AC_MSG_RESULT(yes)
dnl   XPERIMENTALDIRS="$XPERIMENTALDIRS lib/pils lib/plugins/InterfaceMgr lib/plugins/HBauth"
dnl else
dnl   AC_MSG_RESULT(no)
dnl fi
AC_SUBST(XPERIMENTALDIRS)

AC_CONFIG_SUBDIRS(libltdl)

dnl The Makefiles and shell scripts we output
AC_OUTPUT(heartbeat.spec \
Makefile						        \
debian/Makefile							\
doc/Makefile							\
include/Makefile						\
        include/pils/Makefile					\
        include/stonith/Makefile				\
replace/Makefile						\
linux-ha/Makefile						\
lib/Makefile							\
	lib/pils/Makefile					\
	lib/plugins/Makefile					\
		lib/plugins/InterfaceMgr/Makefile		\
		lib/plugins/HBauth/Makefile			\
		lib/plugins/HBcomm/Makefile			\
stonith/Makefile						\
heartbeat/Makefile						\
	heartbeat/rc.d/Makefile					\
	heartbeat/resource.d/Makefile				\
	heartbeat/init.d/Makefile				\
	heartbeat/logrotate.d/Makefile				\
	heartbeat/lib/Makefile					\
		heartbeat/lib/mach_down				\
		heartbeat/lib/req_resource			\
		heartbeat/lib/ResourceManager			\
		heartbeat/init.d/heartbeat			\
		heartbeat/resource.d/AudibleAlarm		\
		heartbeat/resource.d/Filesystem			\
		heartbeat/resource.d/IPaddr			\
		heartbeat/resource.d/Raid1			\
		heartbeat/resource.d/MailTo			\
		heartbeat/resource.d/WinPopup			\
	heartbeat/shellfuncs					\
ldirectord/Makefile						\
	ldirectord/init.d/Makefile				\
	ldirectord/logrotate.d/Makefile				\
)

dnl subpackages configuration - perhaps configure it properly some other time
dnl when it has been discussed at linux-ha-dev
dnl AC_CONFIG_SUBDIRS(stonith heartbeat)
