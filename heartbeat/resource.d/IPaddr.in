#!/bin/sh
#
#	$Id: IPaddr.in,v 1.19 2002/05/15 04:25:47 msoffen Exp $
#
#	This script manages IP alias IP addresses
#
#	It can add an IP alias, or remove one.
#
#	usage: $0 ip-address {start|stop|status}
#
#	The "start" arg adds an IP alias.
#
#	Surprisingly, the "stop" arg removes one.	:-)
#
#

unset LC_ALL; export LC_ALL # Make ifconfig work in France for David Jules :-)
unset LANGUAGE; export LANGUAGE # Make ifconfig work in France for Fabrice :-)

prefix=@prefix@
exec_prefix=@exec_prefix@
. @sysconfdir@/ha.d/shellfuncs

IFCONFIG=@IFCONFIG@
IFCONFIG_A_OPT=@IFCONFIG_A_OPT@
VARLIB=@localstatedir@/lib/@HEARTBEATPKG@
VLDIR=$VARLIB/rsctmp/IPaddr
ROUTE=@ROUTE@
SENDARP=$HA_BIN/send_arp
FINDIF=$HA_BIN/findif
USAGE="usage: $0 ip-address {start|stop|status|monitor}";
SYSTYPE="`uname -s`"

#
#	Find out which alias serves the given IP address
#	The argument is an IP address, and its output
#	is an aliased interface name (e.g., "eth0:0").
#
find_interface_solaris() {

  ipaddr=$1;

  $IFCONFIG $IFCONFIG_A_OPT | nawk '{if ($0 ~ /.*: / && NR > 1) {print "\n"$0} else {print}}' |
  while read ifname linkstuff
  do
    read inet addr junk
    while
      read line && [ "X$line" != "X" ]
    do
      : Nothing
    done

    ha_log "$ipaddr $ifname"

    case $ifname in
      *:*)	;;
      *)	continue;;
    esac

    #  This doesn't look right for a box with multiple NICs.
    #  It looks like it always selects the first interface on
    #  a machine.  Yet, we appear to use the results for this case too...
    case $SYSTYPE in
      *BSD)
		ha_log $ifname
		echo `echo "$ifname" | sed s'%:%%'`
		return 0;;
      SunOS)
		ifname=`echo "$ifname" | sed s'%:$%%'`
		;;
    esac


    case $addr in
      addr:$ipaddr)	echo $ifname; return 0;;
      $ipaddr)	echo $ifname; return 0;;
    esac
  done
  return 1
}

#
#	Find out which alias serves the given IP address
#	The argument is an IP address, and its output
#	is an aliased interface name (e.g., "eth0:0").
#
find_interface() {

  ipaddr=$1;

  $IFCONFIG $IFCONFIG_A_OPT  |
  while read ifname linkstuff
  do
    read inet addr junk
    while
      read line && [ "X$line" != "X" ]
    do
      : Nothing
    done

    ha_log "$ipaddr $ifname"

    case $ifname in
      *:*)	;;
      *)	continue;;
    esac

    #  This doesn't look right for a box with multiple NICs.
    #  It looks like it always selects the first interface on
    #  a machine.  Yet, we appear to use the results for this case too...
    case $SYSTYPE in
      *BSD)
		ha_log $ifname
		echo `echo "$ifname" | sed s'%:%%'`
		return 0;;
      SunOS)
		ifname=`echo "$ifname" | sed s'%:$%%'`
		;;
    esac


    case $addr in
      addr:$ipaddr)	echo $ifname; return 0;;
      $ipaddr)	echo $ifname; return 0;;
    esac
  done
  return 1
}

#
#	Return the MAC address of the given interface in the form
#	sendarp wants to see it...
#

GetMACaddr() {
  case $SYSTYPE in

    *BSD|SunOS)
	# Does this catch all types of interfaces on *BSD and SunOS?
	MACtmp=`$IFCONFIG "$1"  |
	fgrep "ether" |  sed  "s/^.*ether  *//"`
	ifconfig2sendarp "$MACtmp";;

    *)	MACtmp=`$IFCONFIG "$1"  | 
	fgrep "$1" |  sed "s/^.*HWaddr  *//"`
	ifconfig2sendarp "$MACtmp";;
  esac
}


  # Transform a MACaddr from ifconfig style to sendarp style

#HWsed='s%\(..\):\(..\):\(..\):\(..\):\(..\):\(..\).*$%\1\2\3\4\5\6%'

#
# This routine should handle any type of interface, but has only been
# tested on ethernet-type NICs.
#
ifconfig2sendarp() {
	echo "$1" | sed "s%:%%g"
}


#
#	Remove the IP alias for the requested IP address...
#
ip_stop() {
  BASEIP=`echo $1 | sed s'%/.*%%'`
  case $SYSTYPE in
	SunOS)
	 	IF=`find_interface_solaris $BASEIP`
		;;
	*)
	 	IF=`find_interface $BASEIP`
		;;
  esac

  if
    [ -z "$IF" ]
  then
    : Requested interface not in use
    exit 0
  fi

  if
    [ -x $HA_RCDIR/local_giveip ]
  then
    $HA_RCDIR/local_giveip $*
  fi

#
#	The next bit of code originally borrowed from Horms' fake code...
#	and can be inferred from the IP-Aliasing mini-HOWTO
#


  case $SYSTYPE in
	SunOS)
			CMD=""
			;;
	*BSD)
			CMD="$ROUTE delete $BASEIP"
			;;

	*)		CMD="$ROUTE del -host $BASEIP"
			;;
  esac

  ha_log "info: $CMD"
  $CMD

  case $SYSTYPE in
	SunOS)
			case `uname -r` in
				5.8)
					CMD="$IFCONFIG $IF unplumb"
					;;
				*)
					CMD="$IFCONFIG $IF 0";;
			esac
			;;
	*BSD|SunOS)
			CMD="$IFCONFIG $IF delete $BASEIP";;

	*)		CMD="$IFCONFIG $IF down";;
  esac
  ha_log "info: $CMD"
  $CMD
  rc=$?

  case $SYSTYPE in
	*BSD|SunOS)	;;
	*)		# remove lock file...
  			rm -f "$VLDIR/$IF";;
  esac

  case $rc in
    0) ha_log "info: IP Address $BASEIP released";;
    *) ha_log "WARN: IP Address $BASEIP NOT released";;
  esac
  return $rc
}


#
#	Find an unused interface/alias name for us to use for new IP alias
#	The argument is an IP address, and the output
#	is an aliased interface name (e.g., "eth0:0", "dc0", "le0:0").
#
find_free_interface() {
  if
    [ ! -d $VLDIR ]
  then
    mkdir -p $VLDIR
  fi
  BASEIP=`echo $1 | sed s'%/.*%%'`
  if
    NICINFO=`$FINDIF $1`
  then
    : OK
  else
    lrc=$?
    ha_log "ERROR: unable to find an interface for $BASEIP"
    return $lrc
  fi

  nicname=`echo "$NICINFO" | cut -f1`
  nicinfo=`echo "$NICINFO" | cut -f2-`
  if
    [ $nicname = "" ]
  then
    ha_log "ERROR: no interface found for $BASEIP"
    return 1;
  fi

  NICBASE="$VLDIR/$nicname"
  touch "$NICBASE"

  case $SYSTYPE in
	SunOS)
		IFLIST=`$IFCONFIG $IFCONFIG_A_OPT | grep "^$nicname:[0-9]" | sed 's%: .*%%'`
		;;
	*)
		IFLIST=`$IFCONFIG $IFCONFIG_A_OPT | grep "^$nicname:[0-9]" | sed 's% .*%%'`
		;;
  esac

  IFLIST=" `echo $IFLIST` "

  case $SYSTYPE in
       SunOS)
		j=1
		;;
	*)
		j=0
		;;
  esac

  case $SYSTYPE in
	*BSD)
		echo $nicname;
		return 0;;

	*)
  	while
    	  [ $j -lt 512 ]
  	do
    	    case $IFLIST in
	      *" "$nicname:$j" "*)	;;
	      *)			
		NICLINK="$NICBASE:$j"
		if
		  ln "$NICBASE" "$NICLINK"
		then
		  echo "$nicname:$j	$nicinfo"
		  return 0
		fi;;
	    esac
            j=`expr $j + 1`
	done;;
  esac
  return 1
}


#
#	Add an IP alias for the requested IP address...
#
#	It could be that we already have taken it, in which case it should
#	do nothing.
#

ip_start() {
#
#	Do we already service this IP address?
#
  case `ip_status $1` in
    *unning*)	exit 0;
  esac

  BASEIP=`echo $1 | sed s'%/.*%%'`

  if
    IFINFO=`find_free_interface $1`
  then
    : OK got interface [$IFINFO] for $1
  else
    exit 1
  fi
  IF=`echo "$IFINFO" | cut -f1`

  #
  #	On Linux the Alias is named ethx:y
  #	This will remove the "extra" interface Data 
  #	leaving us with just ethx
  #
  case $SYSTYPE in
    *BSD)
		IFEXTRA=""
		;;
    *)
		IFEXTRA=`echo "$IFINFO" | cut -f2-`
		;;
  esac


  if
    [ -x $HA_RCDIR/local_takeip ]
  then
    $HA_RCDIR/local_takeip $*
  fi

#
#	The remaining code in this function taken from FAKE, by horms
#
  case $SYSTYPE in
    SunOS)
		case `uname -r` in
			5.8)
				$IFCONFIG $IF plumb
				CMD="$IFCONFIG $IF inet $BASEIP $IFEXTRA up"
				;;
			*)
				CMD="$IFCONFIG $IF inet $BASEIP $IFEXTRA"
				;;
		esac
		;;
    *BSD)
		CMD="$IFCONFIG $IF inet $BASEIP netmask 255.255.255.255 alias"
							;;
    *)		CMD="$IFCONFIG $IF $BASEIP $IFEXTRA"	;;
  esac

  ha_log "info: $CMD"
  $CMD
  rc=$?

  case $rc in
    0)	;;
    *)	echo "ERROR: $CMD failed."
	return $rc;;
  esac

  case $SYSTYPE in
    *BSD|SunOS)	dev_intf="-interface";;
    *)		dev_intf="dev";;
  esac

  ha_log "info: $ROUTE add -host $BASEIP $dev_intf $IF"
  $ROUTE add -host $BASEIP $dev_intf $IF

  TARGET_INTERFACE=`echo $IF | sed 's%:.*%%'`

  MACADDR=`GetMACaddr "$TARGET_INTERFACE"`

  if [ "X$MACADDR" = "X" ]; then
	ha_log "ERROR: Could not locate obtain hardware address" \
		"for $TARGET_INTERFACE"
	exit 1
  fi

  ha_log "info: Sending Gratuitous Arp for $BASEIP on $IF [$TARGET_INTERFACE]"

  for j in 1 2 3 4 5
  do
   case $SYSTYPE in
	SunOS)
		:
		;;
	*)	
	   ha_log "$SENDARP $TARGET_INTERFACE ${BASEIP} ${MACADDR} ${BASEIP} ffffffffffff"
	   $SENDARP $TARGET_INTERFACE ${BASEIP} ${MACADDR} ${BASEIP} ffffffffffff \
   ||	ha_log "ERROR: Could not send gratuitous arp"
		;;
    esac
     sleep 2
  done &
}

ip_status() {
  BASEIP=`echo $1 | sed -e s'%/.*%%' -e 's%\.%\\\\.%g'`
  if
    $IFCONFIG $IFCONFIG_A_OPT | grep "inet.*[: ]$BASEIP " >/dev/null 2>&1
  then
    echo "running"
  else
    echo "stopped"
  fi
}

#
#	Determine if this IP address is really being served, or not.
#	Note that we don't distinguish if *we're* serving it locally...
#
ip_monitor() {
  BASEIP=`echo $1 | sed s'%/.*%%'`
  OPTS=" -c 1 @PING_TIMEOUT_OPT@ -q"
  for j in 1 2 3
  do
    if
      @PING@ $OPTS $BASEIP >/dev/null 2>&1
    then
      echo "OK"
      return 0
    fi
  done
  echo "down"
  return 1
}

usage() {
  echo $USAGE >&2
  echo "$Id: IPaddr.in,v 1.19 2002/05/15 04:25:47 msoffen Exp $"
}

#
#	Add or remove IP alias for the given IP address...
#

if
  [ $# -eq 1 ]
then
  case $1 in
    info)	cat <<-!INFO
	Abstract=IP address takeover
	Argument=IP address OR IP address/broadcast address OR IP address/broadcast address/netmaskbits
	Description:
	An IPaddr resource is an IP address which is to be taken over by \\
	the owning node.  An argument is required, and is of this form:
	    nnn.nnn.nnn.nnn/bbb.bbb.bbb.bbb
	Where nnn.nnn.nnn.nnn is the IP address to be taken over, and\\
	bbb.bbb.bbb.bbb is the broadcast address to be used with this address.

	Since IPaddr is the "default" resource type, it is not necessary\\
	to prefix the IP address by "IPaddr::".
	This allows IPaddr::192.2.4.63 to be abbreviated as 192.2.4.63.
	!INFO
	exit 0;;
  esac
fi
if
  [ $# -ne 2 ]
then
  usage
  exit 1
fi

case $2 in
  start)	ip_start $1;;
  stop)		ip_stop $1;;
  status)	ip_status $1;;
  monitor)	ip_monitor $1;;
  *)		usage
 		exit 1
		;;
esac
#
#
# $Log: IPaddr.in,v $
# Revision 1.19  2002/05/15 04:25:47  msoffen
# Corrected Ping problem so that it would work in FreeBSD (using parameters from configure.in).
#
# Revision 1.18  2002/04/29 07:32:44  alan
# Solaris extensions/enhancements from Thomas Hepper for Solaris 2.8
#
# Revision 1.17  2002/03/21 02:03:00  alan
# Added locking to the assignment of interfaces in IPaddr.
#
# Revision 1.16  2002/03/14 04:28:51  alan
# Changed all the resource scripts to have ID strings in them
#
# Revision 1.15  2002/02/15 06:53:16  horms
# Small changes to allow heartbeat to work on Solaris 8
# * use unset LC_ALL and unset LANGUAGE instead of LC_ALL=en and LANGUAGE=en
# * provide LOG_PERROR, as Solaris doesn't
# -- Horms
#
# Revision 1.14  2002/01/18 18:55:49  alan
# Put in a generalization suggested by Matt Soffen to allow us
# to handle BSD and Solaris network interfaces.
#
# Revision 1.13  2001/10/24 20:23:09  alan
# Changed INFO: to info: for consistency.
#
# Revision 1.12  2001/10/12 04:54:22  alan
# Changed IPaddr to be more BSD/Solaris compatible
#
# Revision 1.11  2001/10/08 14:04:18  alan
# Put a fix into IPaddr.in to make it work on Solaris as well as Linux.
#
# Revision 1.10  2001/10/07 04:18:20  alan
# Added some more portability patches from David Lee.
#
# Revision 1.9  2001/10/07 04:00:56  alan
# Got rid of a non-portable shell construct in IPaddr.in
#
# Revision 1.8  2001/10/03 15:00:26  alan
# Patch from Matt Soffen to add a comment about the IFEXTRA logic in the
# IPaddr resource script.
# Matt also replaced an errant echo with an ha_log() call.
#
# Revision 1.7  2001/10/03 13:54:16  alan
# Merged in Matt Soffen's changes and added some of my own for IPaddr...
#
# CVg: Committing in .
#
# Revision 1.6  2001/10/02 20:04:09  alan
# I added wehat should be a redundnat fix for Fabrice of France.
# He says it isn't redundant.  It's clearly harmless.
#
# Revision 1.5  2001/07/19 15:59:55  alan
# Put in Matt Soffen's pathname patch...
#
# Revision 1.4  2001/07/02 17:23:23  alan
# Changed the order of the ifdown and route del commands...
#
# Revision 1.3  2001/06/29 21:23:47  alan
# Put in a modified version of Matt Soffen's patch to make
# IPaddr work under FreeBSD.
# Don't know if it works under FreeBSD, but it works on Linux.
#
# Revision 1.2  2001/06/28 20:35:00  alan
# Patch from Juri to install our scripts with paths patched appropriately.
#
# Revision 1.1  2001/06/28 12:16:44  alan
# Committed the *rest* of Juri Haberland's script patch that I thought I
# had already applied :-(.
#
# Revision 1.9  2001/05/17 18:45:55  alan
# Applied two patches for IPaddr from Emily Ratliff <emilyr@us.ibm.com>
#
# Revision 1.8  2001/02/05 21:43:38  alan
# Added "monitor" action to IPaddr.
#
# Revision 1.7  2000/11/07 14:15:04  alan
# Made the takeover of IP addresses go faster.
# Removed the limit on 8 aliases per interface.
#
# Revision 1.6  2000/06/12 06:11:09  alan
# Changed resource takeover order to left-to-right
# Added new version of nice_failback.  Hopefully it works wonderfully!
# Regularized some error messages
# Print the version of heartbeat when starting
# Hosts now have three statuses {down, up, active}
# SuSE compatability due to Friedrich Lobenstock and alanr
# Other minor tweaks, too numerous to mention.
#
# Revision 1.5  1999/12/30 03:18:50  alan
# Put Stefan Salzer's fix on the place he put it in :-)  The same bug appeared
# twice in the code.  I fixed it in one place, and so did he.  Now
# it looks like they're both fixed.
#
# Revision 1.4  1999/12/23 03:28:21  alan
# Put in Stefan Salzer's fix to IPaddr to make it not confuse
# x.y.z.1 with x.y.z.11 or similar...
#
# Revision 1.3  1999/11/16 04:36:53  alan
# Added fix from David Jules to make IPaddr work in France.
# The problem is that various commands that IPaddr invokes (notably ifconfig)
# produce different output in other locales than they do in LC_ALL=en
# so the output wasn't recognized by IPaddr.  The fix is much simpler than
# this explanation :-)
#
# Revision 1.2  1999/11/10 20:33:04  alan
# Deleted /proc/ha directory from build list
# Added #!/bin/sh to lots (all?) of the scripts...
#
# Revision 1.1.1.1  1999/09/23 15:31:24  alanr
# High-Availability Linux
#
# Revision 1.11  1999/09/12 06:56:53  alanr
# Fixed the bugs that kept addresses w/netmasks and broadcast addresses from working.
#
# Revision 1.10  1999/09/08 03:47:18  alanr
# fixed things up so that send_arp doesn't just assume eth0 as the ethernet interface...
#
# Revision 1.9  1999/08/22 04:49:42  alanr
# Fixed a stupid syntax error.  Wonder how it got in here?
#
# Revision 1.8  1999/08/21 05:43:38  alanr
# added "info" argument to support GUI help screens, etc.
#
# Revision 1.7  1999/08/17 18:09:16  alanr
# More message changes.
#
# Revision 1.6  1999/08/17 18:04:31  alanr
# Minor message changes for Thomas' code.
#
# Revision 1.5  1999/08/17 17:57:07  alanr
# Put in Thomas Hepper's fix to make it obey netmasks and broadcast addrs
# from base interface.
#
# Revision 1.4  1999/08/17 05:00:44  alanr
# added a dumb extra #
#
# Revision 1.3  1999/08/17 04:57:57  alanr
# Added RCS keywords, and bug fix from Thomas Hepper
# th@ant.han.de to fix some kind of problem associated with PPP configs.
#
#
#
